@page "/Cart"
@model PRN231_2_EventFlowerExchange_FE.Pages.CartPages.CartModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Cart</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body>
    <form method="post">
        @Html.AntiForgeryToken()
    </form>

    <div class="container mx-auto px-4 py-6">
        <h2 class="text-3xl font-bold text-black mb-8">Your Cart</h2>
        <div id="cart-container">
            @if (Model.CartItems != null && Model.CartItems.Count > 0)
            {
                <table class="w-full table-auto border-collapse border border-gray-200">
                    <thead>
                        <tr>
                            <th class="px-4 py-2">Product</th>
                            <th class="px-4 py-2">Quantity</th>
                            <th class="px-4 py-2">Price</th>
                            <th class="px-4 py-2">Total</th>
                            <th class="px-4 py-2">Actions</th> <!-- Cột mới cho các hành động -->
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.CartItems)
                        {
                            var totalPrice = item.PricePerUnit * item.Quantity;
                            <tr>
                                <td class="border px-4 py-2">@item.Name</td>
                                <td class="border px-4 py-2">
                                    <input type="number" value="@item.Quantity" min="1"
                                           onchange="updateQuantity('@item.FlowerId', this.value)"
                                           class="w-16 text-center">
                                </td>
                                <td class="border px-4 py-2">$@item.PricePerUnit.ToString("F2")</td>
                                <td class="border px-4 py-2">$@totalPrice.ToString("F2")</td>
                                <td class="border px-4 py-2">
                                    <button onclick="deleteItem('@item.FlowerId')" class="text-red-600 hover:text-red-800">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>
            }
            else
            {
                <p>Your cart is empty.</p>
            }
        </div>
        <div class="mt-6">
            <button id="order-button" class="bg-green-600 text-white px-6 py-2 rounded-md hover:bg-green-700">
                Proceed to Payment
            </button>
        </div>
    </div>

    <script>
        let cartItems = []; // Ensure cartItems is initialized

        function updateQuantity(flowerId, quantity) {
            fetch('@Url.Page("Cart", "UpdateQuantity")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ flowerId, quantity })
            })
                .then(response => response.json())
                .then(updatedCart => {
                    cartItems = updatedCart;
                    renderCart(); // Ensure this function is defined
                    saveCartItemsToCookie(cartItems);
                    updateCartCount();
                })
                .catch(error => console.error('Error updating quantity:', error));
        }

        function saveCartItemsToCookie(cartItems) {
            document.cookie = `cartItems=${encodeURIComponent(JSON.stringify(cartItems))}; path=/`;
        }

        // Define the renderCart function
        function renderCart() {
            const cartContainer = document.getElementById('cart-container'); // Ensure this is your cart display element
            cartContainer.innerHTML = ''; // Clear current cart display

            if (cartItems.length === 0) {
                cartContainer.innerHTML = '<p>Your cart is empty.</p>';
                return;
            }

            cartItems.forEach(item => {
                const itemDiv = document.createElement('div');
                itemDiv.className = 'cart-item'; // Add your desired class
                itemDiv.innerHTML = `
                    <h4>${item.flowerName || 'Unknown Flower'}</h4>
                    <p>Price: ${item.pricePerUnit} x ${item.quantity} = ${item.pricePerUnit * item.quantity}</p>
                    <button onclick="deleteItem('${item.flowerId}')">Remove</button>
                `;
                cartContainer.appendChild(itemDiv);
            });
        }

        document.getElementById('order-button').addEventListener('click', function () {
            fetch('@Url.Page("Cart", "GeneratePaymentUrl")', {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // If payment is successful, redirect to success page
                        window.location.href = data.paymentUrl;
                    } else {
                        // If unsuccessful, redirect to failure page
                        window.location.href = data.redirectUrl;
                    }
                })
                .catch(error => console.error('Error generating payment URL:', error));
        });

        function deleteItem(flowerId) {
            // Remove item from local cartItems array first for immediate UI update
            cartItems = cartItems.filter(item => item.flowerId !== flowerId);
            renderCart(); // Update the UI immediately

            // Proceed to delete on the server-side
            fetch('@Url.Page("Cart", "DeleteItem")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ flowerId })
            })
                .then(response => response.json())
                .then(updatedCart => {
                    // Optionally, you can compare and see if the server response matches your expectations
                    saveCartItemsToCookie(cartItems); // Update cookie
                    updateCartCount(); // Update cart count
                })
                .catch(error => console.error('Error deleting item:', error));
        }
    </script>
</body>
</html>

@page
@model PRN231_2_EventFlowerExchange_FE.Pages.FlowerPages.EditFlowerModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Flower</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100">
    <div class="container mx-auto px-6 py-8">
        <h2 class="text-3xl font-bold text-gray-800 mb-6">Edit Flower</h2>
        
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="bg-red-500 text-white p-4 rounded mb-4">
                <strong>Error:</strong> @ViewData.ModelState[""].Errors.FirstOrDefault()?.ErrorMessage
            </div>
        }

        <form method="post" enctype="multipart/form-data" class="bg-white p-6 rounded shadow-md">
            <div class="mb-4">
                <label for="Name" class="block text-gray-700 font-bold mb-2">Flower Name:</label>
                <input type="text" id="Name" name="Flower.Name" value="@Model.Flower.Name" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required />
            </div>

            <div class="mb-4">
                <label for="Type" class="block text-gray-700 font-bold mb-2">Type:</label>
                <select class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                        id="Type"
                        name="Flower.Type"
                        asp-for="Flower.Type"
                        required>
                    <option value="Rose">Rose</option>
                    <option value="Tulip">Tulip</option>
                    <option value="Lily">Lily</option>
                    <option value="Daisy">Daisy</option>
                    <option value="Orchid">Orchid</option>
                    <option value="Sunflower">Sunflower</option>
                </select>
            </div>

            <div class="mb-4">
                <label for="Description" class="block text-gray-700 font-bold mb-2">Description:</label>
                <input type="text" id="Description" name="Flower.Description" value="@Model.Flower.Description" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required />
            </div>

            <div class="mb-4">
                <label for="PricePerUnit" class="block text-gray-700 font-bold mb-2">Price per unit:</label>
                <input type="number"
                       id="PricePerUnit"
                       name="Flower.PricePerUnit"
                       value="@Model.Flower.PricePerUnit"
                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
                <div class="text-red-500 text-sm mt-1" id="priceError"></div>
            </div>

            <div class="mb-4">
                <label for="Origin" class="block text-gray-700 font-bold mb-2">Origin:</label>
                <select id="Origin"
                        name="Flower.Origin"
                        asp-for="Flower.Origin"
                        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                        required>
                    <option value="">-- Select Province --</option>
                    <option value="Đà Lạt">Đà Lạt</option>
                    <option value="Hà Nội">Hà Nội</option>
                    <option value="Lào Cai">Lào Cai</option>
                    <option value="Hải Phòng">Hải Phòng</option>
                    <option value="Đà Nẵng">Đà Nẵng</option>
                    <option value="Hồ Chí Minh">Hồ Chí Minh</option>
                </select>
            </div>


            <div class="mb-4">
                <label for="Color" class="block text-gray-700 font-bold mb-2">Color:</label>
                <select class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                        id="Color"
                        name="Flower.Color"
                        asp-for="Flower.Color">
                    <option value="Red">Red</option>
                    <option value="Yellow">Yellow</option>
                    <option value="White">White</option>
                    <option value="Pink">Pink</option>
                    <option value="Purple">Purple</option>
                    <option value="Orange">Orange</option>
                </select>
            </div>

            <div class="mb-4">
                <label for="RemainingQuantity" class="block text-gray-700 font-bold mb-2">Remaining Quantity:</label>
                <input type="number"
                       id="RemainingQuantity"
                       name="Flower.RemainingQuantity"
                       value="@Model.Flower.RemainingQuantity"
                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
                <div class="text-red-500 text-sm mt-1" id="quantityError"></div>
            </div>

            <input type="hidden" asp-for="Flower.BatchId" />

            <div class="mb-4">
                <label class="block text-gray-700 font-bold mb-2">Current Image:</label>
                <img src="@Model.Flower.Image" alt="@Model.Flower.Image" class="w-32 h-32 object-cover border rounded mb-2" />
            </div>

            <div class="mb-4">
                <label for="ImageFile" class="block text-gray-700 font-bold mb-2">Upload New Image:</label>
                <input type="file" id="ImageFile" name="ImageFile" accept="image/*" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" />
            </div>

            <div class="flex justify-between mt-4">
                <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Save Changes</button>
                <a href="/FlowerPages/FlowerDetailInBatch?batchId=@Model.Flower.BatchId" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
                    Back to Create Flower
                </a>
            </div>
        </form>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.querySelector("form");
            const quantityInput = document.getElementById("RemainingQuantity");
            const priceInput = document.getElementById("PricePerUnit");

            // Constants for validation
            const CONSTRAINTS = {
                quantity: { min: 1, message: 'Remaining Quantity must be at least 1' },
                price: {
                    min: 10000,
                    max: 100000,
                    message: 'Price per Unit must be between 10,000 and 100,000'
                }
            };

            // Validate single input
            function validateInput(input, type) {
                const value = parseFloat(input.value);
                const constraint = CONSTRAINTS[type];
                let isValid = true;

                if (type === 'quantity') {
                    if (isNaN(value) || value < constraint.min) {
                        isValid = false;
                        input.classList.add("border-red-500");
                        input.setCustomValidity(constraint.message);
                    }
                } else if (type === 'price') {
                    if (isNaN(value) || value < constraint.min || value > constraint.max) {
                        isValid = false;
                        input.classList.add("border-red-500");
                        input.setCustomValidity(constraint.message);
                    }
                }

                if (isValid) {
                    input.classList.remove("border-red-500");
                    input.setCustomValidity("");
                }

                return isValid;
            }

            // Add input event listeners for real-time validation
            quantityInput.addEventListener("input", function () {
                validateInput(this, 'quantity');
            });

            priceInput.addEventListener("input", function () {
                validateInput(this, 'price');
            });

            // Form submit validation
            form.addEventListener("submit", function (event) {
                let isFormValid = true;
                let errorMessages = [];

                // Validate quantity
                if (!validateInput(quantityInput, 'quantity')) {
                    isFormValid = false;
                    errorMessages.push(CONSTRAINTS.quantity.message);
                }

                // Validate price
                if (!validateInput(priceInput, 'price')) {
                    isFormValid = false;
                    errorMessages.push(CONSTRAINTS.price.message);
                }

                if (!isFormValid) {
                    event.preventDefault();
                    alert(errorMessages.join('\n'));
                }
            });
        });
    </script>


</body>
</html>
